@startuml ObjectiveCardUML

skinparam BackgroundColor ghostwhite

package cards.objective{
    abstract class ObjectiveCard {
      # ObjectiveCard(ObjectiveBuilder):
      - id: int
      - points: int
      + getId(): int
      + getColorRequirements(): ImmutableMap<Color, Integer>
      + getType(): ObjectiveCardType
      + getPoints(): int
      + getSymbolRequirements(): ImmutableMap<Symbol, Integer>
      + countPoints(PlayerField): int
    }

    abstract class CollectingCard extends ObjectiveCard{
      # CollectingCard(CollectingBuilder):
    }
    abstract class PositioningCard extends ObjectiveCard{
      # PositioningCard(PositioningBuilder):
      - colorsOfPattern: ImmutableMap<Color, Integer>
      + isFlipped(): boolean
      + isRotated(): boolean
    }

    class ColorCollectCard extends CollectingCard{
      - ColorCollectCard(ColorCollectBuilder):
      - colorToCollect: ImmutableMap<Color, Integer>
    }
    class SymbolCollectCard extends CollectingCard{
      - SymbolCollectCard(SymbolCollectBuilder):
      - symbolToCollect: ImmutableMap<Symbol, Integer>
    }

    class TripletCard extends PositioningCard{
      - TripletCard(TripletBuilder):
      - flippedFlag: boolean
    }
    class LCard extends PositioningCard{
      - LCard(LBuilder):
      - isFlippedFlag: boolean
      - isRotatedFlag: boolean
    }

    abstract class ObjectiveBuilder <T extends ObjectiveCard> {
        - id: int
        - points: int
        # ObjectiveBuilder(id, int)

        + {abstract} build(): <T>
    }

    abstract class CollectingBuilder extends ObjectiveBuilder{

    }

    abstract class PositioningBuilder extends ObjectiveBuilder{

    }

    class ColorCollectBuilder extends CollectingBuilder{
        - colorToCollect: EnumMap<Color, Integer>
        + hasColor(Color, int): ColorCollectBuilder
        + hasColor(Color): ColorCollectBuilder
    }

    class SymbolCollectBuilder extends CollectingBuilder{
        - symbolToCollect: EnumMap<Symbol, Integer>

        + hasSymbol(Symbol, int): SymbolCollectBuilder
        + hasSymbol(Symbol): SymbolCollectBuilder
    }

    class TripletBuilder extends PositioningBuilder{
        # colorRequirements: EnumMap<Color, Integer>
        - flippedFlag: boolean
        - colorOfPattern: Color

        + isFlipped(boolean): TripletBuilder
        + hasColor(Color): TripletBuilder
    }

    class LBuilder extends PositioningBuilder{
        - flippedFlag: boolean
        - rotatedFlag: boolean
        - primaryColor: Color
        - secondaryColor: Color
        - colorRequirements: EnumMap<Color, Integer>

        + isFlipped(boolean): LBuilder
        + isRotated(boolean): LBuilder
        + hasPrimaryColor(Color): LBuilder
        + hasSecondaryColor(Color): LBuilder
    }

    ObjectiveCard +-- ObjectiveBuilder
    CollectingCard +-- CollectingBuilder
    PositioningCard +-- PositioningBuilder
    ColorCollectCard +-- ColorCollectBuilder
    SymbolCollectCard +-- SymbolCollectBuilder
    TripletCard +-- TripletBuilder
    LCard +-- LBuilder

}

@enduml