@startuml ProjectIngSoftModel

skinparam BackgroundColor ghostwhite

package cards.playable{


    abstract class PlayableCard{
      # PlayableCard(PlayableCardBuilder):
      - id: int
      - color: Color
      - points: int
      + getId(): int
      + getPoints(): int
      + getColor(): Color
      + getCenter(isRetro: boolean): Set<Color>
      + countPoints(PlayerField, Position): int
      + {abstract} getType(): PlayableCardType
      + {abstract} isFrontAvailable(Corner): boolean
      + {abstract} getPlacingRequirements(): Map<Color, Integer>
      + {abstract} getPlacingRequirementsOf(Color): int
      + {abstract} getPointsRequirements(): PointsRequirementsType
      + {abstract} getItemCorner(Corner): CornerContainer
      + {abstract} getSymbolToCollect(): Optional<Symbol>
    }

    class GoldCard extends PlayableCard{
      - colorPlacingRequirements: Map<Color, Integer>
      - availableCornersOrSymbol: Map<Corner, CornerContainer>
      - pointsRequirements: PointsRequirementsType
      - symbolToCollect: Symbol
      - GoldCard(GoldCardBuilder)
    }

    class ResourceCard extends PlayableCard{
      - availableCornerOrItem: Map<Corner, CornerContainer>
      - ResourceCard(ResourceCardBuilder)
    }

    abstract class Builder <T extends PlayableCard>{
      - id: int
      - cardPoints: int
      - primaryColor: Color

      # Builder(id, cardPoints, Color)
      + {abstract} hasIn(Corner, CornerContainer): Builder<T>
      + {abstract} build(): Builder<T>
    }

    class GoldCardBuilder extends Builder <GoldCard>{
      - availableCornersOrSymbol: EnumMap<Corner, CornerContainer>
      - colorPlacingRequirements: EnumMap<Color, Integer>
      - pointsRequirements: PointsRequirementsType
      - symbolToCollect: Symbol

      + GoldCardBuilder(id, points, Color)
      + hasCorner(Corner, isAvailable: boolean): GoldCardBuilder
      + hasCorner(Corner): GoldCardBuilder
      + hasRequirements(Color, int): GoldCardBuilder
      + hasPointsRequirements(PointsRequirementsType): GoldCardBuilder
      + hasSymbolToCollect(Symbol): GoldCardBuilder
    }


    class ResourceCardBuilder extends Builder <ResourceCard>{
      - availableCornerOrItem: EnumMap<Corne, CornerContainer>

      + ResourceCardBuilder(id, points, Color)
    }

    PlayableCard +-- Builder
    GoldCard +-- GoldCardBuilder
    ResourceCard +-- ResourceCardBuilder
}
package cards.starter{
    class StarterCard{
      - id: int
      - availableCornersFront: Map<Corner, Availability>
      - availableColorCornerRetro: Map<Corner, Color>
      - centerColorsFront: Set<Color>

      - StarterCard(StarterCardBuilder)
      + getId(): int
      + getRetroColorIn(Corner): Color
      + isFrontCornerAvail(Corner): boolean
      + getCenterColorsFront(): Set<Color>
    }

  class StarterCardBuilder {
    - availableCornersFront: EnumMap<Corner, Availability>
    - availableColorCornerBack: EnumMap<Corner, Color>
    - centerColors: EnumSet<Color>

    + hasAvailableFrontCorner(Corner): StarterCardBuilder
    + hasColorBackIn(Corner, Color): StarterCardBuilder
    + hasCenterColors(Set<Color>): StarterCardBuilder
    + hasCenterColors(Color): StarterCardBuilder
    + build(): StarterCard
  }

  StarterCard +-- StarterCardBuilder
}

package cards.utils{
    interface CardIdentity <<sealed>> {
      + getId(): int
    }

    interface FieldCard <<sealed>> implements CardIdentity {
      + isColorEqual(Color): boolean
      + isAvailable(Corner, isRetro: boolean): boolean
      + getItemCorner(Corner, isRetro: boolean): CornerContainer
      + getCenter(isRetro: boolean): Set<Color>
    }

}

FieldCard <|.. PlayableCard
FieldCard <|.. StarterCard

package cards.utils{
    interface DatabaseSearchable {
        + getColumnName(): String
    }

    interface CornerContainer << sealed >> {
      + isAvailable(): boolean
      + getItem(): Optional<Item>
      + getTUICode(): String
    }

    interface Item << sealed >> implements DatabaseSearchable{
    }
    
    package enums{
        enum Corner{
          + DOWN_RX
          + TOP_RX
          + DOWN_LX
          + TOP_LX
        }

        enum Availability{
          + USABLE
          + NOT_USABLE
        }

        enum Color{
          + RED
          + PURPLE
          + BLUE
          + GREEN
        }

        enum Symbol{
          + PAPER
          + GLASS
          + FEATHER
        }
        enum ObjectiveCardType  {
          + L_SHAPE
          + TRIPLET
          + OBJECT_COLLECT
          + COLOR_COLLECT

          + getPositions(isFlipped: boolean, isRotated: boolean): Optional<Set<Position>>
        }

        enum PlayableCardType  {
          + GOLD
          + RESOURCE

          + getName(): String
        }

        enum PointsRequirementsType  {
          + CLASSIC
          + COVERING_CORNERS
          + SYMBOLS
        }

        enum PatternPurpose {
            + ADJACENT_LX
            + ADJACENT_RX
            + NEXT_CHECK
            + PREVIOUS_CHECK
            + TO_COMPLETE
        }
    }

    DatabaseSearchable <|.. Corner
    CornerContainer <|.. Availability
    CornerContainer <|.. Color
    CornerContainer <|.. Symbol
    Item <|.. Color
    Item <|.. Symbol

}

package cards.objective{
    abstract class ObjectiveCard {
      - id: int
      - points: int

      # ObjectiveCard(ObjectiveBuilder):
      + getPoints(): int
      + hasItemRequirements(Item): int
      + {abstract} getColorRequirements(): Map<Color, Integer>
      + {abstract} getSymbolRequirements(): Map<Symbol, Integer>
      + {abstract} getType(): ObjectiveCardType
      + {abstract} countPoints(PlayerField): int
    }

    abstract class CollectingCard extends ObjectiveCard{
      # CollectingCard(CollectingBuilder):
    }
    abstract class PositioningCard extends ObjectiveCard{
      - colorsOfPattern: Map<Color, Integer>
      # PositioningCard(PositioningBuilder)
      + {abstract} getPattern(): List<List<Color>>
    }

    abstract class ObjectiveBuilder <T extends ObjectiveCard> {
        - id: int
        - points: int

        # ObjectiveBuilder(id, int)

        + {abstract} build(): <T>
    }

    abstract class CollectingBuilder <T extends CollectingCard> extends ObjectiveBuilder{
        # CollectingBuilder(id, points)
    }

    abstract class PositioningBuilder <T extends PositioningCard> extends ObjectiveBuilder{
        # PositioningBuilder(id, points)
    }

    package collecting {
        class ColorCollectCard{
          - colorToCollect: Map<Color, Integer>
          - ColorCollectCard(ColorCollectBuilder)
        }
        class SymbolCollectCard{
          - SymbolCollectCard(SymbolCollectBuilder)
          - symbolToCollect: Map<Symbol, Integer>
        }

        class ColorCollectBuilder{
            - colorToCollect: EnumMap<Color, Integer>

            + ColorCollectBuilder(id, points)
            + hasColor(Color, int): ColorCollectBuilder
            + hasColor(Color): ColorCollectBuilder
        }

        class SymbolCollectBuilder{
            - symbolToCollect: EnumMap<Symbol, Integer>

            + SymbolCollectBuilder(id, points)
            + hasSymbol(Symbol, int): SymbolCollectBuilder
            + hasSymbol(Symbol): SymbolCollectBuilder
        }
    }

    CollectingCard <|-- ColorCollectCard
    CollectingCard <|-- SymbolCollectCard
    CollectingBuilder <|-- ColorCollectBuilder
    CollectingBuilder <|-- SymbolCollectBuilder

    package positioning{
        class TripletCard{
          - flippedFlag: boolean
          - colorOfPattern: Color
          - counter: PatternCounter
          - pattern: List<List<Color>>

          - TripletCard(TripletBuilder)
          + isFlipped(): boolean
        }

        class LCard{
          - isFlippedFlag: boolean
          - isRotatedFlag: boolean
          - primaryColor: Color
          - secondaryColor: Color
          - pattern: List<List<Color>>

          - LCard(LBuilder)
          + isFlipped(): boolean
          + isRotated(): boolean
        }

        class TripletBuilder{
            - colorRequirements: EnumMap<Color, Integer>
            - flippedFlag: boolean
            - colorOfPattern: Color

            + isFlipped(boolean): TripletBuilder
            + hasColor(Color): TripletBuilder
        }

        class LBuilder{
            - flippedFlag: boolean
            - rotatedFlag: boolean
            - primaryColor: Color
            - secondaryColor: Color
            - colorRequirements: EnumMap<Color, Integer>
            - counter: PatternCounter

            + isFlipped(boolean): LBuilder
            + isRotated(boolean): LBuilder
            + hasPrimaryColor(Color): LBuilder
            + hasSecondaryColor(Color): LBuilder
        }

        interface PatternCounter{
            + count(PlayerField): int
        }

        class LPatternCounter implements PatternCounter{
        }

        class TripletPatternCounter implements PatternCounter{
        }
    }

    PositioningCard <|-- TripletCard
    PositioningCard <|-- LCard
    PositioningBuilder <|-- TripletBuilder
    PositioningBuilder <|-- LBuilder





    ObjectiveCard +-- ObjectiveBuilder
    CollectingCard +-- CollectingBuilder
    PositioningCard +-- PositioningBuilder
    ColorCollectCard +-- ColorCollectBuilder
    SymbolCollectCard +-- SymbolCollectBuilder
    TripletCard +-- TripletBuilder
    LCard +-- LBuilder

}

CardIdentity <|.. ObjectiveCard

package decks{
    package utils {

        class CardDecoder{
            - {static}objectiveDeck: Deck<ObjectiveCard>
            - {static}starterDeck: Deck<StarterCard>
            - {static}goldDeck: Deck<GoldCard>
            - {static}resourceDeck: Deck<ResourceCard>

            + {static}decodeObjectiveCard(int): Optional<ObjectiveCard>
            + {static}decodeFieldCard(int): Optional<FieldCard>
            + {static}decodePlayableCard(int): Optional<PlayableCard>
            + {static}decodeResourceCard(int): Optional<ResourceCard>
            + {static}decodeGoldCard(int): Optional<GoldCard>
            + {static}decodeStarterCard(int): Optional<StarterCard>
        }

        class DatabaseConstants{
            + {static}DATABASE_URL
        }
    }

    class Deck <T extends CardIdentity>{
        - mappingIdToCard: Map<Integer, T>
        - deck: ArrayDeque<T>

        + Deck(mappingIdToCard: Map<Integer, T>)

        + shuffle(): Deck<T>
        + draw(): Optional<T>
        + getRemainingCards(): int
        + getDeckType(): DeckType
        + reset(): void
        + getCardByID(int): T
        + peekTop(): Optional<T>
        + save(): DeckMemento
        + load(DeckMemento): void
    }

    package objective{
        class ObjectiveDeckFactory {
            + {static} createDeck(): Deck<ObjectiveCard>
        }
    }

    package playable{
        class GoldDeckFactory {
            + {static} createDeck(): Deck<GoldCard>
        }

        class ResourceDeckFactory {
            + {static} createDeck(): Deck<ResourceCard>
        }
    }

    package starter {
        class StarterDeckFactory {
            + {static} createDeck(): Deck<StarterCard>
        }
    }
}

cards -- decks

package players{
    class Player {
        - nickname: String
        - color: PlayerColor
        - space: PersonalSpace
        - field: PlayerField

        + nickname(): String
        + color(): Color
        + space(): PersonalSpace
        + field(): PlayerField
        + load(PlayerMemento): void
        + save(): PlayerMemento
    }

    class PersonalSpace {
        - {static}maxSizeOfHand: int
        - {static}maxObjectives: int
        - {static}maxCandidateObjectives: int

        - playerHand: Set<PlayableCard>
        - playerObjective: Set<ObjectiveCard>
        - candidateObjectives: Set<ObjectiveCard>
        - starterCard: StarterCard

        + getPlayerHand(): Set<PlayableCard>
        + getPlayerObjective(): Set<ObjectiveCard>
        + getCandidateObjectives(): Set<ObjectiveCard>
        + getCandidateObjectiveByID(int): ObjectiveCard
        + setNewCandidateObjective(ObjectiveCard): void
        + availableSpaceInHand(): int
        + addCardToHand(PlayableCard): void
        + pickCard(int): PlayableCard
        + addObjective(ObjectiveCard): void
        + setStarterCard(StarterCard): void
        + areObjectiveGiven(): boolean

        + save(): PersonalSpaceMemento
        + load(PersonalSpaceMemento): void

        + clearAll(): void
    }

    package field {

        class ExposedItemManager {
            - exposedColors: EnumMap<Color, Integer>
            - exposedSymbols: EnumMap<Symbol, Integer>
            - placedCardColors: EnumMap<Color, Integer>

            ~ ExposedItemManager()
            ~ reset(): void
            ~ subToExposed(Item): void
            ~ addCardColor(Color): void
            ~ addExposedItemOn(FieldCard, isRetro: boolean): void
            ~ addToExposed(Item): void
            ~ getPlacedCardOf(Color): int
            ~ isRequirementsMet(PlayableCard, isRetro: boolean): boolean
            ~ getExposedItem(Item): int

            ~ save(): ExposedItemManagerMemento
            ~ load(ExposedItemManagerMemento): void
        }

        class PositionManager {
            - availablePositions: Set<Position>
            - closedPositions: Set<Position>
            - cardsPositioned: Map<Position, CardContainer>

            + {static}getMovementOfPositions(Position, List<Corner>): Position
            + {static}getPositionIn(Position, Corner): Position
            + {static}getCornerFromPositions(Position, Position): Optional<Corner>

            + reset(): void
            + placeCard(FieldCard, Position, isRetro: boolean): List<Item>
            + getAvailablePositions(): Set<Position>
            + isAvailable(Position): boolean
            + containsCard(FieldCard): boolean
            + getCardsPositioned(): Map<Position, CardContainer>

            + save(): PositionManagerMemento
            + load(PositionManagerMemento): void

        }


        class PlayerField{
            - itemManager: ExposedItemManager
            - positionManager: PositionManager

            + clearAll(): void
            + placeStartingCard(StarterCard, isRetro: boolean): void
            + place(PlayableCard, Position, isRetro: boolean): void
            + getAvailablePositions(): Set<Position>
            + isAvailable(Position): boolean
            + getNumberOf(Item): int
            + containsCard(FieldCard): boolean
            + getCardsPositioned(): Map<Position, CardContainer>
            + getPlacedCardColours(): Map<Color, Integer>
            + getNumberOfPositionedColor(Color): int
            + isRequirementMet(FieldCard, isRetro: boolean): boolean

            + save(): FieldMemento
            + load(FieldMemento): void
        }

        PlayerField -- ExposedItemManager
        PlayerField -- PositionManager
    }


    Player "1" -- "1" PersonalSpace
    PlayerField "1" -- "1" Player

    package utils {
        class CardContainer{
            - card: FieldCard
            - coveredCorners: EnumMap<Corner, boolean>
            - isRetro: boolean

            + getCard(): FieldCard
            + isCornerCovered(Corner): boolean
            + cover(Corner): Optional<Item>
            + isColorEqual(Color): boolean
            + isRetro(): boolean
            + getContainerOn(Corner): CornerContainer

            + save(): CardContainerMemento
        }

        class Position{
            -x: int
            -y: int

            + Position(x, y)
            + of(x, y): Position
        }

        enum PlayerColor{
            + RED
            + BLUE
            + GREEN
            + YELLOW
        }
    }
}

package table{

    class DeckManager {
        - goldDeck: Deck<GoldCard>
        - resourceDeck: Deck<ResourceCard>
        - objectiveDeck: Deck<ObjectiveCard>
        - starterDeck: Deck<StarterCard>

        + reset(): void
        + shuffle(): void
        + getDeckTop(PlayableCardType): Optional<Color>
        + drawPlayableFrom(PlayableDeckType): Optional<PlayableCard>
        + drawStarter(): Optional<StarterCard>
        + drawObjective(): Optional<ObjectiveCard>
        + getRemainingCardsOf(PlayableDeckType): int

        + save(): DeckManagerMemento
        + load(DeckManagerMemento): void
    }

    class PickablesTable{

        - {static}numOfCommonObjectives: int
        - {static}numOfShownPerType: int
        - {static}numOfCandidatesObjectives: int

        - deckManager: DeckManager
        - shownPlayable: Map<PlayableCardType, Set<PlayableCard>>
        - commonObjectives: Set<ObjectiveCard>
        - pcs: GameListenerSupport

        + resetDecks(): void
        + shuffleDecks(): void
        + initialize(): void
        + getDeckTop(PlayableCardType): Optional<Color>
        + getCommonObjectives(): Set<ObjectiveCard>
        + getShownPlayable(PlayableCardType): Set<PlayableCard>
        + getRemainingCardsOf(PlayableDeckType): int
        + drawPlayableFrom(PlayableDeckType): PlayableCard
        + pickStarterCard(): StarterCard
        + pickObjectiveCandidates(): Set<ObjectiveCard>
        + pickObjectiveCard(): ObjectiveCard
        + pickCommonObjectives(): void
        + pickPlayableVisible(id): PlayableCard

        + save(): PickablesTableMemento
        + savePublic(): ReconnectionTableMemento
        + load(PickablesTableMemento): void
    }

    class Plateau{
        - {static}armageddonTime: int
        - playerPoints: Map<String, Integer>
        - counterObjective: Map<String, Integer>
        - finalLeaderboard: Map<String, Integer>
        - status: AtomicReference<GameStatus>
        - pcs: GameListenerSupport

        + setStatus(GameStatus): void
        + addPlayerPoints(player, points): void
        + isArmageddonTime(): boolean
        + activateArmageddon(): void
        + removePlayer(player): void
        + reset(): void
        + addPlayer(player): void
        + addCounterObjective(player): void
        + getPlayerPoints(player): int
        + getCounterObjective(player): int
        + setFinalLeaderboard(): void
        + getPlayerFinishingPosition(player): int
        + setWinner(player): void

        + save(): PlateauMemento
        + load(PlateauMemento): void
    }

    DeckManager -- PickablesTable
}

DeckManager -- decks

interface GameModel{
    + getRuleSet(): RuleSet
    + getPlayers(): Set<String>
    + getCurrentTurnPlayer(): String
    + getFirstPlayer(): String
    + getPlayerHand(String): Set<id>
    + getPlayerObjective(String): Set<id>
    + getPlayerColor(String): PlayerColor
    + getPositionedCards(String): Map<Position, CardContainer>
    + getAvailablePositions(String): Set<Position>
    + getCommonObjectives(): Set<id>
    + getExposedCards(PlayableCardType): Set<id>
    + getPlayerPoints(String): int
    + getPlayerFinishingPosition(String): int
    + getWinner(): String
    + getGameStatus(): GameStatus
    + getDeckTop(PlayableCardType): Optional<Color>
    + getCandidateObjectives(String): Set<id>
    + getStarterCard(String): Optional<id>
    + isDisconnected(String): boolean

    + initGame(): void
    + addPlayerToTable(String, PlayerColor): void
    + removePlayer(String): void
    + setStarterFor(String, isRetro: boolean): void
    + setObjectiveFor(String, id): void
    + placeCard(String, id, Position, isRetro: boolean): void
    + drawFromDeckOf(PlayableCardType, String): id
    + goNextTurn(): void
    + drawVisibleOf(PlayableCardType, String, id): id
    + forceEnd(): void
    + addPlayerListener(String, PlayerListener): void
    + addTableListener(TableListener): void
    + disconnectPlayer(String): void
    + reconnectPlayer(String, PlayerListener): void
    + endGameEarly(): void

    + save(): GameModelMemento
    + load(GameModelMemento): void
    + reSyncWith(String): void
}

class GameLogic implements GameModel{
    - ruleSet: RuleSet
    - playerManager: PlayerManager
    - pickablesTable: PickablesTable
    - plateau: Plateau
    - reconnectionTimer: ReconnectionTimer
    - isLoadedGame: boolean
    - pcs: GameListenerSupport
}

class PlayerManager {
    - {static} maxNumberOfPlayers: int

    - players: SequencedMap<String, Player>
    - playerQueue: Queue<Player>
    - unavailablePlayers: Set<Player>
    - firstPlayer: Player
    - currentPlaying: Player
    - currentAction: TurnAction
    - pcs: GameListenerSupport

    + getPlayers(): SequencedSet<String>
    + getCurrentTurnPlayer(): Optional<String>
    + areAllReconnected(): boolean
    + getFirstPlayer(): Optional<String>
    + getPlayer(String): Optional<Player>
    + getHand(String): Set<id>
    + getPlayerObjective(String): Set<id>
    + getStarterCard(String): Optional<StarterCard>
    + getCandidateObjectives(String): Set<ObjectiveCard>
    + getCurrentAction(): TurnAction
    + getPlayerColor(String): Optional<PlayerColor>
    + getAvailablePositions(String): Set<Position>
    + isFirstTheCurrent(): boolean
    + areStarterSet(): boolean
    + areObjectivesSet(): boolean
    + isTurnOf(String): boolean
    + isCurrentDisconnected(): boolean
    + areAllDisconnected(): boolean
    + getNumberOfConnected(): int
    + isConnected(String): boolean
    + isDisconnected(String): boolean

    + addPlayerToTable(String, PlayerColor): void
    + removePlayer(String): void
    + chooseFirstPlayer(): void
    + goNextTurn(): void
    + setCurrentAction(TurnAction): void
    + reconnectPlayer(Player): void
    + disconnectPlayer(Player): void
    + setStarterCard(String, StarterCard): void
    + setCandidateObjectives(String, Set<ObjectiveCard>): void
    + resetAll(): void
    + hardReset(): void

    + save(): PlayerManagerMemento
    + save(String): PlayerManagerMemento
    + load(PlayerManagerMemento): void
}

GameLogic -- PlayerManager


package utils{
    enum GameStatus {
        + SETUP
        + CHOOSING_STARTERS
        + CHOOSING_OBJECTIVES
        + ONGOING
        + ARMAGEDDON
        + LAST_TURN
        + ENDED
    }

    enum TurnAction {
        + PLACE_CARD
        + DRAW_CARD
    }

    interface RuleSet{
        + getObjectiveToChooseFrom(): int
        + getResourceAtStart: int
        + getGoldAtStart: int
        + getHandSize(): int
        + getNumOfPersonalObjective(): int
        + getNumOfCommonObjectives(): int
        + getMaxPlayers(): int
        + getPointsToArmageddon(): int
    }

    class BasicRuleset implements RuleSet{
        - {static} handSize: int
        - {static} maxRevealedCardsPerType: int
        - {static} numOfPersonalObjective: int
        - {static} numOfCommonObjectives: int
        - {static} maxPlayers: int
        - {static} pointsToArmageddon: int
        - {static} resourceAtStart: int
        - {static} goldAtStart: int
        - {static} objectiveToChooseFrom: int
    }
}
RuleSet -- GameLogic

GameLogic -- Plateau
GameLogic -- PickablesTable
GameLogic -- Player


@enduml